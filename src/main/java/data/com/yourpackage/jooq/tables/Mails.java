/*
 * This file is generated by jOOQ.
 */
package com.yourpackage.jooq.tables;


import com.yourpackage.jooq.Keys;
import com.yourpackage.jooq.Public;
import com.yourpackage.jooq.tables.records.MailsRecord;

import java.util.Collection;
import java.util.function.Function;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.SelectField;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Mails extends TableImpl<MailsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.mails</code>
     */
    public static final Mails MAILS = new Mails();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MailsRecord> getRecordType() {
        return MailsRecord.class;
    }

    /**
     * The column <code>public.mails.id</code>.
     */
    public final TableField<MailsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.mails.sender_id</code>.
     */
    public final TableField<MailsRecord, Integer> SENDER_ID = createField(DSL.name("sender_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.mails.receiver_id</code>.
     */
    public final TableField<MailsRecord, Integer> RECEIVER_ID = createField(DSL.name("receiver_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.mails.message</code>.
     */
    public final TableField<MailsRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private Mails(Name alias, Table<MailsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Mails(Name alias, Table<MailsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.mails</code> table reference
     */
    public Mails(String alias) {
        this(DSL.name(alias), MAILS);
    }

    /**
     * Create an aliased <code>public.mails</code> table reference
     */
    public Mails(Name alias) {
        this(alias, MAILS);
    }

    /**
     * Create a <code>public.mails</code> table reference
     */
    public Mails() {
        this(DSL.name("mails"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<MailsRecord, Integer> getIdentity() {
        return (Identity<MailsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MailsRecord> getPrimaryKey() {
        return Keys.MAILS_PKEY;
    }

    @Override
    public Mails as(String alias) {
        return new Mails(DSL.name(alias), this);
    }

    @Override
    public Mails as(Name alias) {
        return new Mails(alias, this);
    }

    @Override
    public Mails as(Table<?> alias) {
        return new Mails(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Mails rename(String name) {
        return new Mails(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Mails rename(Name name) {
        return new Mails(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Mails rename(Table<?> name) {
        return new Mails(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Mails where(Condition condition) {
        return new Mails(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Mails where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Mails where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Mails where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Mails where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Mails where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Mails where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Mails where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Mails whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Mails whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
